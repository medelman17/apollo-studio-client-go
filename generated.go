// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package apollostudio

import (
	"context"
	"encoding/json"
	"fmt"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// CreateServiceNewService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type CreateServiceNewService struct {
	// Globally unique identifier for this graph.
	Id      string                                      `json:"id"`
	ApiKeys []CreateServiceNewServiceApiKeysGraphApiKey `json:"apiKeys"`
}

// GetId returns CreateServiceNewService.Id, and is useful for accessing the field via an interface.
func (v *CreateServiceNewService) GetId() string { return v.Id }

// GetApiKeys returns CreateServiceNewService.ApiKeys, and is useful for accessing the field via an interface.
func (v *CreateServiceNewService) GetApiKeys() []CreateServiceNewServiceApiKeysGraphApiKey {
	return v.ApiKeys
}

// CreateServiceNewServiceApiKeysGraphApiKey includes the requested fields of the GraphQL type GraphApiKey.
type CreateServiceNewServiceApiKeysGraphApiKey struct {
	Token string `json:"token"`
}

// GetToken returns CreateServiceNewServiceApiKeysGraphApiKey.Token, and is useful for accessing the field via an interface.
func (v *CreateServiceNewServiceApiKeysGraphApiKey) GetToken() string { return v.Token }

// CreateServiceResponse is returned by CreateService on success.
type CreateServiceResponse struct {
	NewService CreateServiceNewService `json:"newService"`
}

// GetNewService returns CreateServiceResponse.NewService, and is useful for accessing the field via an interface.
func (v *CreateServiceResponse) GetNewService() CreateServiceNewService { return v.NewService }

// DeleteServiceResponse is returned by DeleteService on success.
type DeleteServiceResponse struct {
	Service DeleteServiceServiceServiceMutation `json:"service"`
}

// GetService returns DeleteServiceResponse.Service, and is useful for accessing the field via an interface.
func (v *DeleteServiceResponse) GetService() DeleteServiceServiceServiceMutation { return v.Service }

// DeleteServiceServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Contains mutations related to Studio graphs and subgraphs.
type DeleteServiceServiceServiceMutation struct {
	// Soft delete a graph. Data associated with the graph is not permanently deleted; Apollo support can undo.
	Delete interface{} `json:"delete"`
}

// GetDelete returns DeleteServiceServiceServiceMutation.Delete, and is useful for accessing the field via an interface.
func (v *DeleteServiceServiceServiceMutation) GetDelete() interface{} { return v.Delete }

// GetCallerMembershipsMeIdentity includes the requested fields of the GraphQL interface Identity.
//
// GetCallerMembershipsMeIdentity is implemented by the following types:
// GetCallerMembershipsMeInternalIdentity
// GetCallerMembershipsMeService
// GetCallerMembershipsMeUser
// The GraphQL type's documentation follows.
//
// An identity (e.g. Anonymous, a specific User) within Apollo Studio. See implementations.
type GetCallerMembershipsMeIdentity interface {
	implementsGraphQLInterfaceGetCallerMembershipsMeIdentity()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *GetCallerMembershipsMeInternalIdentity) implementsGraphQLInterfaceGetCallerMembershipsMeIdentity() {
}
func (v *GetCallerMembershipsMeService) implementsGraphQLInterfaceGetCallerMembershipsMeIdentity() {}
func (v *GetCallerMembershipsMeUser) implementsGraphQLInterfaceGetCallerMembershipsMeIdentity()    {}

func __unmarshalGetCallerMembershipsMeIdentity(b []byte, v *GetCallerMembershipsMeIdentity) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "InternalIdentity":
		*v = new(GetCallerMembershipsMeInternalIdentity)
		return json.Unmarshal(b, *v)
	case "Service":
		*v = new(GetCallerMembershipsMeService)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(GetCallerMembershipsMeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Identity.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for GetCallerMembershipsMeIdentity: "%v"`, tn.TypeName)
	}
}

func __marshalGetCallerMembershipsMeIdentity(v *GetCallerMembershipsMeIdentity) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *GetCallerMembershipsMeInternalIdentity:
		typename = "InternalIdentity"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCallerMembershipsMeInternalIdentity
		}{typename, v}
		return json.Marshal(result)
	case *GetCallerMembershipsMeService:
		typename = "Service"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCallerMembershipsMeService
		}{typename, v}
		return json.Marshal(result)
	case *GetCallerMembershipsMeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*GetCallerMembershipsMeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for GetCallerMembershipsMeIdentity: "%T"`, v)
	}
}

// GetCallerMembershipsMeInternalIdentity includes the requested fields of the GraphQL type InternalIdentity.
type GetCallerMembershipsMeInternalIdentity struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCallerMembershipsMeInternalIdentity.Typename, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeInternalIdentity) GetTypename() string { return v.Typename }

// GetCallerMembershipsMeService includes the requested fields of the GraphQL type Service.
// The GraphQL type's documentation follows.
//
// A graph in Apollo Studio represents a graph in your organization.
// Each graph has one or more variants, which correspond to the different environments where that graph runs (such as staging and production).
// Each variant has its own GraphQL schema, which means schemas can differ between environments.
type GetCallerMembershipsMeService struct {
	Typename string `json:"__typename"`
}

// GetTypename returns GetCallerMembershipsMeService.Typename, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeService) GetTypename() string { return v.Typename }

// GetCallerMembershipsMeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A registered Apollo Studio user.
type GetCallerMembershipsMeUser struct {
	Typename string `json:"__typename"`
	// A list of the user's memberships in Apollo Studio organizations.
	Memberships []GetCallerMembershipsMeUserMembershipsUserMembership `json:"memberships"`
}

// GetTypename returns GetCallerMembershipsMeUser.Typename, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeUser) GetTypename() string { return v.Typename }

// GetMemberships returns GetCallerMembershipsMeUser.Memberships, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeUser) GetMemberships() []GetCallerMembershipsMeUserMembershipsUserMembership {
	return v.Memberships
}

// GetCallerMembershipsMeUserMembershipsUserMembership includes the requested fields of the GraphQL type UserMembership.
// The GraphQL type's documentation follows.
//
// A single user's membership in a single Apollo Studio organization.
type GetCallerMembershipsMeUserMembershipsUserMembership struct {
	// The user's permission level within the organization.
	Permission UserPermission `json:"permission"`
	// The organization that the user belongs to.
	Account GetCallerMembershipsMeUserMembershipsUserMembershipAccount `json:"account"`
}

// GetPermission returns GetCallerMembershipsMeUserMembershipsUserMembership.Permission, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeUserMembershipsUserMembership) GetPermission() UserPermission {
	return v.Permission
}

// GetAccount returns GetCallerMembershipsMeUserMembershipsUserMembership.Account, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeUserMembershipsUserMembership) GetAccount() GetCallerMembershipsMeUserMembershipsUserMembershipAccount {
	return v.Account
}

// GetCallerMembershipsMeUserMembershipsUserMembershipAccount includes the requested fields of the GraphQL type Account.
// The GraphQL type's documentation follows.
//
// An organization. Can have multiple members and graphs.
type GetCallerMembershipsMeUserMembershipsUserMembershipAccount struct {
	// Globally unique identifier, which isn't guaranteed stable (can be changed by administrators).
	Id string `json:"id"`
}

// GetId returns GetCallerMembershipsMeUserMembershipsUserMembershipAccount.Id, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsMeUserMembershipsUserMembershipAccount) GetId() string { return v.Id }

// GetCallerMembershipsResponse is returned by GetCallerMemberships on success.
type GetCallerMembershipsResponse struct {
	// Returns details of the authenticated `User` or `Graph` executing this query. If this is an unauthenticated query (i.e., no API key is provided), this field returns null.
	Me GetCallerMembershipsMeIdentity `json:"-"`
}

// GetMe returns GetCallerMembershipsResponse.Me, and is useful for accessing the field via an interface.
func (v *GetCallerMembershipsResponse) GetMe() GetCallerMembershipsMeIdentity { return v.Me }

func (v *GetCallerMembershipsResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*GetCallerMembershipsResponse
		Me json.RawMessage `json:"me"`
		graphql.NoUnmarshalJSON
	}
	firstPass.GetCallerMembershipsResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Me
		src := firstPass.Me
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalGetCallerMembershipsMeIdentity(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal GetCallerMembershipsResponse.Me: %w", err)
			}
		}
	}
	return nil
}

type __premarshalGetCallerMembershipsResponse struct {
	Me json.RawMessage `json:"me"`
}

func (v *GetCallerMembershipsResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *GetCallerMembershipsResponse) __premarshalJSON() (*__premarshalGetCallerMembershipsResponse, error) {
	var retval __premarshalGetCallerMembershipsResponse

	{

		dst := &retval.Me
		src := v.Me
		var err error
		*dst, err = __marshalGetCallerMembershipsMeIdentity(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal GetCallerMembershipsResponse.Me: %w", err)
		}
	}
	return &retval, nil
}

// NewKeyResponse is returned by NewKey on success.
type NewKeyResponse struct {
	Service NewKeyServiceServiceMutation `json:"service"`
}

// GetService returns NewKeyResponse.Service, and is useful for accessing the field via an interface.
func (v *NewKeyResponse) GetService() NewKeyServiceServiceMutation { return v.Service }

// NewKeyServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Contains mutations related to Studio graphs and subgraphs.
type NewKeyServiceServiceMutation struct {
	NewKey NewKeyServiceServiceMutationNewKeyGraphApiKey `json:"newKey"`
}

// GetNewKey returns NewKeyServiceServiceMutation.NewKey, and is useful for accessing the field via an interface.
func (v *NewKeyServiceServiceMutation) GetNewKey() NewKeyServiceServiceMutationNewKeyGraphApiKey {
	return v.NewKey
}

// NewKeyServiceServiceMutationNewKeyGraphApiKey includes the requested fields of the GraphQL type GraphApiKey.
type NewKeyServiceServiceMutationNewKeyGraphApiKey struct {
	CreatedAt time.Time      `json:"createdAt"`
	Id        string         `json:"id"`
	KeyName   string         `json:"keyName"`
	Role      UserPermission `json:"role"`
	Token     string         `json:"token"`
}

// GetCreatedAt returns NewKeyServiceServiceMutationNewKeyGraphApiKey.CreatedAt, and is useful for accessing the field via an interface.
func (v *NewKeyServiceServiceMutationNewKeyGraphApiKey) GetCreatedAt() time.Time { return v.CreatedAt }

// GetId returns NewKeyServiceServiceMutationNewKeyGraphApiKey.Id, and is useful for accessing the field via an interface.
func (v *NewKeyServiceServiceMutationNewKeyGraphApiKey) GetId() string { return v.Id }

// GetKeyName returns NewKeyServiceServiceMutationNewKeyGraphApiKey.KeyName, and is useful for accessing the field via an interface.
func (v *NewKeyServiceServiceMutationNewKeyGraphApiKey) GetKeyName() string { return v.KeyName }

// GetRole returns NewKeyServiceServiceMutationNewKeyGraphApiKey.Role, and is useful for accessing the field via an interface.
func (v *NewKeyServiceServiceMutationNewKeyGraphApiKey) GetRole() UserPermission { return v.Role }

// GetToken returns NewKeyServiceServiceMutationNewKeyGraphApiKey.Token, and is useful for accessing the field via an interface.
func (v *NewKeyServiceServiceMutationNewKeyGraphApiKey) GetToken() string { return v.Token }

type OnboardingArchitecture string

const (
	OnboardingArchitectureMonolith   OnboardingArchitecture = "MONOLITH"
	OnboardingArchitectureSupergraph OnboardingArchitecture = "SUPERGRAPH"
)

// RemoveKeyResponse is returned by RemoveKey on success.
type RemoveKeyResponse struct {
	Service RemoveKeyServiceServiceMutation `json:"service"`
}

// GetService returns RemoveKeyResponse.Service, and is useful for accessing the field via an interface.
func (v *RemoveKeyResponse) GetService() RemoveKeyServiceServiceMutation { return v.Service }

// RemoveKeyServiceServiceMutation includes the requested fields of the GraphQL type ServiceMutation.
// The GraphQL type's documentation follows.
//
// Contains mutations related to Studio graphs and subgraphs.
type RemoveKeyServiceServiceMutation struct {
	RemoveKey interface{} `json:"removeKey"`
}

// GetRemoveKey returns RemoveKeyServiceServiceMutation.RemoveKey, and is useful for accessing the field via an interface.
func (v *RemoveKeyServiceServiceMutation) GetRemoveKey() interface{} { return v.RemoveKey }

type UserPermission string

const (
	UserPermissionBillingManager UserPermission = "BILLING_MANAGER"
	UserPermissionConsumer       UserPermission = "CONSUMER"
	UserPermissionContributor    UserPermission = "CONTRIBUTOR"
	UserPermissionDocumenter     UserPermission = "DOCUMENTER"
	UserPermissionGraphAdmin     UserPermission = "GRAPH_ADMIN"
	UserPermissionLegacyGraphKey UserPermission = "LEGACY_GRAPH_KEY"
	UserPermissionObserver       UserPermission = "OBSERVER"
	UserPermissionOrgAdmin       UserPermission = "ORG_ADMIN"
)

// __CreateServiceInput is used internally by genqlient
type __CreateServiceInput struct {
	AccountId              string                 `json:"accountId"`
	NewServiceId           string                 `json:"newServiceId"`
	Name                   string                 `json:"name"`
	OnboardingArchitecture OnboardingArchitecture `json:"onboardingArchitecture"`
}

// GetAccountId returns __CreateServiceInput.AccountId, and is useful for accessing the field via an interface.
func (v *__CreateServiceInput) GetAccountId() string { return v.AccountId }

// GetNewServiceId returns __CreateServiceInput.NewServiceId, and is useful for accessing the field via an interface.
func (v *__CreateServiceInput) GetNewServiceId() string { return v.NewServiceId }

// GetName returns __CreateServiceInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateServiceInput) GetName() string { return v.Name }

// GetOnboardingArchitecture returns __CreateServiceInput.OnboardingArchitecture, and is useful for accessing the field via an interface.
func (v *__CreateServiceInput) GetOnboardingArchitecture() OnboardingArchitecture {
	return v.OnboardingArchitecture
}

// __DeleteServiceInput is used internally by genqlient
type __DeleteServiceInput struct {
	ServiceId string `json:"serviceId"`
}

// GetServiceId returns __DeleteServiceInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__DeleteServiceInput) GetServiceId() string { return v.ServiceId }

// __NewKeyInput is used internally by genqlient
type __NewKeyInput struct {
	ServiceId string         `json:"serviceId"`
	KeyName   string         `json:"keyName"`
	Role      UserPermission `json:"role"`
}

// GetServiceId returns __NewKeyInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__NewKeyInput) GetServiceId() string { return v.ServiceId }

// GetKeyName returns __NewKeyInput.KeyName, and is useful for accessing the field via an interface.
func (v *__NewKeyInput) GetKeyName() string { return v.KeyName }

// GetRole returns __NewKeyInput.Role, and is useful for accessing the field via an interface.
func (v *__NewKeyInput) GetRole() UserPermission { return v.Role }

// __RemoveKeyInput is used internally by genqlient
type __RemoveKeyInput struct {
	ServiceId   string `json:"serviceId"`
	RemoveKeyId string `json:"removeKeyId"`
}

// GetServiceId returns __RemoveKeyInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__RemoveKeyInput) GetServiceId() string { return v.ServiceId }

// GetRemoveKeyId returns __RemoveKeyInput.RemoveKeyId, and is useful for accessing the field via an interface.
func (v *__RemoveKeyInput) GetRemoveKeyId() string { return v.RemoveKeyId }

func CreateService(
	ctx context.Context,
	client graphql.Client,
	accountId string,
	newServiceId string,
	name string,
	onboardingArchitecture OnboardingArchitecture,
) (*CreateServiceResponse, error) {
	req := &graphql.Request{
		OpName: "CreateService",
		Query: `
mutation CreateService ($accountId: ID!, $newServiceId: ID!, $name: String, $onboardingArchitecture: OnboardingArchitecture) {
	newService(accountId: $accountId, id: $newServiceId, name: $name, onboardingArchitecture: $onboardingArchitecture) {
		id
		apiKeys {
			token
		}
	}
}
`,
		Variables: &__CreateServiceInput{
			AccountId:              accountId,
			NewServiceId:           newServiceId,
			Name:                   name,
			OnboardingArchitecture: onboardingArchitecture,
		},
	}
	var err error

	var data CreateServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteService(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
) (*DeleteServiceResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteService",
		Query: `
mutation DeleteService ($serviceId: ID!) {
	service(id: $serviceId) {
		delete
	}
}
`,
		Variables: &__DeleteServiceInput{
			ServiceId: serviceId,
		},
	}
	var err error

	var data DeleteServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetCallerMemberships(
	ctx context.Context,
	client graphql.Client,
) (*GetCallerMembershipsResponse, error) {
	req := &graphql.Request{
		OpName: "GetCallerMemberships",
		Query: `
query GetCallerMemberships {
	me {
		__typename
		... on User {
			memberships {
				permission
				account {
					id
				}
			}
		}
	}
}
`,
	}
	var err error

	var data GetCallerMembershipsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func NewKey(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	keyName string,
	role UserPermission,
) (*NewKeyResponse, error) {
	req := &graphql.Request{
		OpName: "NewKey",
		Query: `
mutation NewKey ($serviceId: ID!, $keyName: String, $role: UserPermission!) {
	service(id: $serviceId) {
		newKey(keyName: $keyName, role: $role) {
			createdAt
			id
			keyName
			role
			token
		}
	}
}
`,
		Variables: &__NewKeyInput{
			ServiceId: serviceId,
			KeyName:   keyName,
			Role:      role,
		},
	}
	var err error

	var data NewKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveKey(
	ctx context.Context,
	client graphql.Client,
	serviceId string,
	removeKeyId string,
) (*RemoveKeyResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveKey",
		Query: `
mutation RemoveKey ($serviceId: ID!, $removeKeyId: ID) {
	service(id: $serviceId) {
		removeKey(id: $removeKeyId)
	}
}
`,
		Variables: &__RemoveKeyInput{
			ServiceId:   serviceId,
			RemoveKeyId: removeKeyId,
		},
	}
	var err error

	var data RemoveKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
